#!/bin/bash

# Microservices Startup Script
# This script builds and starts all microservices

set -e

echo "ðŸš€ Starting Microservices Architecture..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    print_error "Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if required files exist
if [ ! -f "docker-compose.microservices.yml" ]; then
    print_error "docker-compose.microservices.yml not found!"
    exit 1
fi

# Build microservices
print_status "Building microservices..."

# Build Auth Service
print_status "Building Auth Service..."
cd server/auth-service
if [ -f "gradlew" ]; then
    ./gradlew build -x test
else
    print_warning "Gradle wrapper not found, skipping build"
fi
cd ../..

# Build Document Service
print_status "Building Document Service..."
cd server/document-service
if [ -f "gradlew" ]; then
    ./gradlew build -x test
else
    print_warning "Gradle wrapper not found, skipping build"
fi
cd ../..

# Build GenAI Service
print_status "Building GenAI Service..."
cd server/genai-service
if [ -f "gradlew" ]; then
    ./gradlew build -x test
else
    print_warning "Gradle wrapper not found, skipping build"
fi
cd ../..

# Build Eureka Server
print_status "Building Eureka Server..."
cd server/eureka-server
if [ -f "gradlew" ]; then
    ./gradlew build -x test
else
    print_warning "Gradle wrapper not found, skipping build"
fi
cd ../..

# Create necessary directories and files
print_status "Setting up configuration files..."

# Create Traefik ACME file if it doesn't exist
if [ ! -f "traefik/acme.json" ]; then
    print_status "Creating Traefik ACME file..."
    mkdir -p traefik
    touch traefik/acme.json
    chmod 600 traefik/acme.json
fi

# Stop any existing containers
print_status "Stopping existing containers..."
docker-compose -f docker-compose.microservices.yml down --remove-orphans

# Start services
print_status "Starting microservices..."
docker-compose -f docker-compose.microservices.yml up -d

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 30

# Check service health
print_status "Checking service health..."

# Check Eureka Server
if curl -s http://localhost:8761 > /dev/null; then
    print_success "Eureka Server is running at http://localhost:8761"
else
    print_warning "Eureka Server might not be ready yet"
fi

# Check Auth Service
if curl -s http://localhost:8083/actuator/health > /dev/null 2>&1; then
    print_success "Auth Service is running at http://localhost:8083"
else
    print_warning "Auth Service might not be ready yet"
fi

# Check Document Service
if curl -s http://localhost:8084/actuator/health > /dev/null 2>&1; then
    print_success "Document Service is running at http://localhost:8084"
else
    print_warning "Document Service might not be ready yet"
fi

# Check GenAI Service
if curl -s http://localhost:8085/genai/health > /dev/null 2>&1; then
    print_success "GenAI Service is running at http://localhost:8085"
else
    print_warning "GenAI Service might not be ready yet"
fi

# Check Traefik Dashboard
if curl -s http://localhost:8080 > /dev/null; then
    print_success "Traefik Dashboard is running at http://localhost:8080"
else
    print_warning "Traefik Dashboard might not be ready yet"
fi

# Check Client
if curl -s http://localhost:3000 > /dev/null; then
    print_success "Client is running at http://localhost:3000"
else
    print_warning "Client might not be ready yet"
fi

print_success "Microservices startup completed!"
echo ""
echo "ðŸ“‹ Service URLs:"
echo "  â€¢ Client: http://localhost:3000"
echo "  â€¢ Traefik Dashboard: http://localhost:8080"
echo "  â€¢ Eureka Dashboard: http://localhost:8761"
echo "  â€¢ Auth Service: http://localhost:8083"
echo "  â€¢ Document Service: http://localhost:8084"
echo "  â€¢ GenAI Service: http://localhost:8085"
echo ""
echo "ðŸ”§ Useful Commands:"
echo "  â€¢ View logs: docker-compose -f docker-compose.microservices.yml logs -f"
echo "  â€¢ Stop services: docker-compose -f docker-compose.microservices.yml down"
echo "  â€¢ Restart services: docker-compose -f docker-compose.microservices.yml restart"
echo ""
echo "ðŸ“– For more information, see MICROSERVICES_README.md" 