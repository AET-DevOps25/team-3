name: Deploy GenAI Backend

on:
  push:
    branches: [main]
    paths:
      - 'genAi/**'
      - 'infra/helm-charts/genai-backend/**'
      - '.github/workflows/deploy-genai-backend.yml'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'genAi/**'
      - 'infra/helm-charts/genai-backend/**'
      - '.github/workflows/deploy-genai-backend.yml'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('genAi/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd genAi
          pip install -r requirements.txt
          echo "✅ Dependencies installed successfully"

      - name: Build Docker Image
        run: |
          cd genAi
          docker build -t ghcr.io/aet-devops25/team-3/genai:${{ github.event.inputs.image_tag || github.sha }} .
          docker build -t ghcr.io/aet-devops25/team-3/genai:latest .
          echo "✅ Docker image built successfully"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          cd genAi
          docker push ghcr.io/aet-devops25/team-3/genai:${{ github.event.inputs.image_tag || github.sha }}
          docker push ghcr.io/aet-devops25/team-3/genai:latest
          echo "✅ Docker image pushed successfully"

      - name: Setup Kubernetes tools
        run: |
          echo "🔧 Setting up Kubernetes tools..."
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "✅ Kubernetes tools installed"
          kubectl version --client
          helm version

      - name: Configure kubectl
        run: |
          echo "🔧 Configuring kubectl..."
          
          # Set up kubectl configuration
          mkdir -p $HOME/.kube
          cat > $HOME/.kube/config << 'EOF'
          apiVersion: v1
          kind: Config
          clusters:
          - name: "student"
            cluster:
              server: "https://rancher.ase.cit.tum.de/k8s/clusters/c-m-nhcfjg9h"
          
          users:
          - name: "student"
            user:
              token: "kubeconfig-u-g7fbq4tzcsrjvb2:dtw5qr2nkwl5hl4r676dlmt7v9lh9bw5xgkp5l65pf6tr6ql79zsmm"
          
          contexts:
          - name: "student"
            context:
              user: "student"
              cluster: "student"
          
          current-context: "student"
          EOF
          chmod 600 $HOME/.kube/config
          
          echo "✅ Kubectl configured"
          
          # Test connection
          echo "🔍 Testing cluster connection..."
          kubectl cluster-info || {
            echo "❌ Failed to connect to cluster"
            exit 1
          }
          echo "✅ Cluster connection successful"

      - name: Deploy GenAI Backend
        run: |
          echo "🚀 Deploying GenAI Backend..."
          
          # Ensure namespace exists
          kubectl create namespace study-mate --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy genai backend with secrets
          helm upgrade --install genai-backend ./infra/helm-charts/genai-backend -n study-mate \
            --set teamid=study-mate \
            --set genaiBackend.image.tag="${{ github.event.inputs.image_tag || github.sha }}" \
            --set secrets.genai.data.openWebUiApiKeyChat="${{ secrets.OPENWEBUI_API_KEY_CHAT }}" \
            --set secrets.genai.data.openWebUiApiKeyGen="${{ secrets.OPENWEBUI_API_KEY_GEN }}" \
            --set secrets.genai.data.langsmithApiKey="${{ secrets.LANGSMITH_API_KEY }}" \
            --wait --timeout=5m || {
            echo "❌ GenAI backend deployment failed"
            echo "🔍 Checking deployment status..."
            helm status genai-backend -n study-mate || echo "⚠️  Could not get release status"
            echo "🔍 Checking pod status..."
            kubectl get pods -n study-mate -l app.kubernetes.io/name=genai-backend || echo "⚠️  Could not get pod status"
            exit 1
          }
          
          echo "✅ GenAI backend deployed successfully"

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying GenAI backend deployment..."
          
          # Wait for pod to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=genai-backend -n study-mate --timeout=300s || {
            echo "❌ GenAI backend pod failed to become ready"
            echo "🔍 Pod status:"
            kubectl get pods -n study-mate -l app.kubernetes.io/name=genai-backend -o wide
            echo "🔍 Pod logs:"
            kubectl logs -l app.kubernetes.io/name=genai-backend -n study-mate --tail=50 || echo "⚠️  Could not get logs"
            exit 1
          }
          
          echo "✅ GenAI backend is ready"
          
          # Check service
          kubectl get service genai-backend -n study-mate
          
          # Health check
          echo "🏥 Performing health check..."
          kubectl port-forward svc/genai-backend 8081:8081 -n study-mate &
          PF_PID=$!
          sleep 10
          
          if curl -f http://localhost:8081/health > /dev/null 2>&1; then
            echo "✅ GenAI backend health check passed"
          else
            echo "❌ GenAI backend health check failed"
          fi
          
          kill $PF_PID 2>/dev/null || true

      - name: Deployment Summary
        run: |
          echo "🌐 GenAI Backend Deployment Complete!"
          echo "📦 Namespace: study-mate"
          echo "🔧 Release: genai-backend"
          echo "🏷️  Image tag: ${{ github.event.inputs.image_tag || github.sha }}"
          echo ""
          echo "🔧 Useful commands:"
          echo "  kubectl get pods -n study-mate -l app.kubernetes.io/name=genai-backend"
          echo "  kubectl logs -f deployment/genai-backend -n study-mate"
          echo "  kubectl port-forward svc/genai-backend 8081:8081 -n study-mate"
          echo ""
          echo "🔍 Troubleshooting:"
          echo "  kubectl get events -n study-mate --sort-by='.lastTimestamp'"
          echo "  helm status genai-backend -n study-mate" 