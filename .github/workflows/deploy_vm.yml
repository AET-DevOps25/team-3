name: Deploy to EC2

on:
  push:
    branches: [main]


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      COMMIT_SHA: ${{ github.sha }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

    # Build and Push
      - name: Build and push client
        run: |
          docker build --platform linux/amd64 -t ghcr.io/aet-devops25/team-3/client:${COMMIT_SHA} ./client
          docker push ghcr.io/aet-devops25/team-3/client:${COMMIT_SHA}

      - name: Build and push server
        run: |
          docker build --platform linux/amd64 -t ghcr.io/aet-devops25/team-3/server:${COMMIT_SHA} ./server
          docker push ghcr.io/aet-devops25/team-3/server:${COMMIT_SHA}

      - name: Build and push genai
        run: |
          docker build --platform linux/amd64 -t ghcr.io/aet-devops25/team-3/genai:${COMMIT_SHA} ./genAi
          docker push ghcr.io/aet-devops25/team-3/genai:${COMMIT_SHA}

      # Tag and push as latest
      - name: Tag and push client as latest
        run: |
          docker tag ghcr.io/aet-devops25/team-3/client:${COMMIT_SHA} ghcr.io/aet-devops25/team-3/client:latest
          docker push ghcr.io/aet-devops25/team-3/client:latest

      - name: Tag and push server as latest
        run: |
          docker tag ghcr.io/aet-devops25/team-3/server:${COMMIT_SHA} ghcr.io/aet-devops25/team-3/server:latest
          docker push ghcr.io/aet-devops25/team-3/server:latest

      - name: Tag and push genai as latest
        run: |
          docker tag ghcr.io/aet-devops25/team-3/genai:${COMMIT_SHA} ghcr.io/aet-devops25/team-3/genai:latest
          docker push ghcr.io/aet-devops25/team-3/genai:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.LABUSER_SSH_BASE64 }}" | base64 -d > key.pem
          chmod 400 key.pem

      - name: Generate Ansible inventory
        run: |
          echo "[ec2]" > inventory.ini
          echo "studymate-tum.xyz ansible_user=ubuntu ansible_ssh_private_key_file=key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Deploy with Ansible
        env:
          IMAGE_TAG: ${{ env.COMMIT_SHA }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          OPEN_WEBUI_API_KEY_CHAT: ${{ secrets.OPEN_WEBUI_API_KEY_CHAT }}
          OPEN_WEBUI_API_KEY_GEN: ${{ secrets.OPEN_WEBUI_API_KEY_GEN }}
          LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
        run: ansible-playbook -i inventory.ini deploy/ansible/deploy.yml

  deploy-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Deploy to Kubernetes
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Deploy using Helm - this will fail the job if deployment fails
          helm upgrade --install studymate ./infra/studymate \
            --namespace team-3 \
            --set global.teamid=team-3 \
            --set global.imageTag=latest \
            --set secrets.postgresPassword="${POSTGRES_PASSWORD}" \
            --set secrets.openaiApiKey="${OPENAI_API_KEY}" \
            --set secrets.jwtSecret="${JWT_SECRET}" \
            --set secrets.databaseUrl="${DATABASE_URL}" \
            --wait --timeout=10m
          
          echo "âœ… Kubernetes deployment completed successfully!"
          echo "Your app should be available at: https://team-3.k8s.aet.cit.tum.de"

  