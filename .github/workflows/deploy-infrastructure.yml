name: Deploy Infrastructure

on:
  workflow_run:
    workflows: ["CI Test Suite"]
    types:
      - completed
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'infra/helm-charts/postgres/**'
      - 'infra/helm-charts/weaviate/**'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      postgres_persistence_size:
        description: 'PostgreSQL persistence size'
        required: false
        default: '1Gi'
      weaviate_persistence_size:
        description: 'Weaviate persistence size'
        required: false
        default: '1Gi'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for infrastructure changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Check if infrastructure files changed in the commit that triggered CI
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            if echo "$CHANGED_FILES" | grep -E "(^infra/helm-charts/postgres/|^infra/helm-charts/weaviate/|^\.github/workflows/deploy-infrastructure\.yml)"; then
              echo "infrastructure_changed=true" >> $GITHUB_OUTPUT
            else
              echo "infrastructure_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "infrastructure_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Kubernetes tools
        if: steps.changes.outputs.infrastructure_changed == 'true'
        run: |
          echo "🔧 Setting up Kubernetes tools..."
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          echo "✅ Kubernetes tools installed"
          kubectl version --client
          helm version

      - name: Configure kubectl
        if: steps.changes.outputs.infrastructure_changed == 'true'
        run: |
          echo "🔧 Configuring kubectl..."
          
          # Set up kubectl configuration
          mkdir -p $HOME/.kube
          cat > $HOME/.kube/config << 'EOF'
          apiVersion: v1
          kind: Config
          clusters:
          - name: "student"
            cluster:
              server: "https://rancher.ase.cit.tum.de/k8s/clusters/c-m-nhcfjg9h"
          
          users:
          - name: "student"
            user:
              token: "kubeconfig-u-g7fbq4tzcsrjvb2:dtw5qr2nkwl5hl4r676dlmt7v9lh9bw5xgkp5l65pf6tr6ql79zsmm"
          
          contexts:
          - name: "student"
            context:
              user: "student"
              cluster: "student"
          
          current-context: "student"
          EOF
          chmod 600 $HOME/.kube/config
          
          echo "✅ Kubectl configured"
          


      - name: Deploy PostgreSQL
        if: steps.changes.outputs.infrastructure_changed == 'true' && github.event.inputs.deploy_postgres != 'false'
        env:
          HELM_RELEASE_NAME: postgres
          CHART_PATH: ./infra/helm-charts/postgres
          HELM_NAMESPACE: study-mate
        run: |
          echo "🚀 Deploying PostgreSQL..."
          
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ${{ env.CHART_PATH }} \
            --namespace ${{ env.HELM_NAMESPACE }} \
            --set secrets.postgres.data.password="${{ secrets.POSTGRES_PASSWORD }}" \
            --wait --timeout=10m
          
          echo "✅ PostgreSQL deployed successfully"

      - name: Deploy Weaviate
        if: steps.changes.outputs.infrastructure_changed == 'true' && github.event.inputs.deploy_weaviate != 'false'
        env:
          HELM_RELEASE_NAME: weaviate
          CHART_PATH: ./infra/helm-charts/weaviate
          HELM_NAMESPACE: study-mate
        run: |
          echo "🚀 Deploying Weaviate..."
          
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ${{ env.CHART_PATH }} \
            --namespace ${{ env.HELM_NAMESPACE }} \
            --wait --timeout=10m
          
          echo "✅ Weaviate deployed successfully"

      - name: Verify Infrastructure
        if: steps.changes.outputs.infrastructure_changed == 'true'
        run: |
          echo "🔍 Verifying infrastructure deployment..."
          
          # Check PostgreSQL
          if kubectl get deployment postgres -n study-mate > /dev/null 2>&1; then
            echo "📊 Checking PostgreSQL..."
            kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgres -n study-mate --timeout=300s || {
              echo "❌ PostgreSQL pod failed to become ready"
              kubectl get pods -n study-mate -l app.kubernetes.io/name=postgres -o wide
            }
            echo "✅ PostgreSQL is ready"
          fi
          
          # Check Weaviate
          if kubectl get deployment weaviate -n study-mate > /dev/null 2>&1; then
            echo "🔍 Checking Weaviate..."
            kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=weaviate -n study-mate --timeout=300s || {
              echo "❌ Weaviate pod failed to become ready"
              kubectl get pods -n study-mate -l app.kubernetes.io/name=weaviate -o wide
            }
            echo "✅ Weaviate is ready"
          fi
          
          # Check services
          echo "🔧 Checking services..."
          kubectl get services -n study-mate -l app.kubernetes.io/name=postgres || echo "⚠️  PostgreSQL service not found"
          kubectl get services -n study-mate -l app.kubernetes.io/name=weaviate || echo "⚠️  Weaviate service not found"
          
          # Check PVCs
          echo "💾 Checking persistent volumes..."
          kubectl get pvc -n study-mate

      - name: Infrastructure Health Check
        if: steps.changes.outputs.infrastructure_changed == 'true'
        run: |
          echo "🏥 Performing infrastructure health checks..."
          
          # PostgreSQL health check
          if kubectl get service postgres -n study-mate > /dev/null 2>&1; then
            echo "🔍 Testing PostgreSQL connection..."
            kubectl port-forward svc/postgres 5432:5432 -n study-mate &
            PF_PID=$!
            sleep 10
            
            if timeout 10 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done' 2>/dev/null; then
              echo "✅ PostgreSQL health check passed"
            else
              echo "❌ PostgreSQL health check failed"
            fi
            
            kill $PF_PID 2>/dev/null || true
          fi
          
          # Weaviate health check
          if kubectl get service weaviate -n study-mate > /dev/null 2>&1; then
            echo "🔍 Testing Weaviate connection..."
            kubectl port-forward svc/weaviate 8087:8087 -n study-mate &
            PF_PID=$!
            sleep 10
            
            if curl -f http://localhost:8087/v1/.well-known/ready > /dev/null 2>&1; then
              echo "✅ Weaviate health check passed"
            else
              echo "❌ Weaviate health check failed"
            fi
            
            kill $PF_PID 2>/dev/null || true
          fi

      - name: Deployment Summary
        if: steps.changes.outputs.infrastructure_changed == 'true'
        run: |
          echo "🏗️  Infrastructure Deployment Complete!"
          echo "📦 Namespace: study-mate"
          echo ""
          echo "🔧 Deployed Services:"
          kubectl get deployments -n study-mate --no-headers | awk '{print "  - " $1}'
          echo ""
          echo "🔧 Useful commands:"
          echo "  kubectl get pods -n study-mate"
          echo "  kubectl get services -n study-mate"
          echo "  kubectl get pvc -n study-mate"
          echo "  kubectl logs -f deployment/postgres -n study-mate"
          echo "  kubectl logs -f deployment/weaviate -n study-mate"
          echo ""
          echo "🔍 Troubleshooting:"
          echo "  kubectl get events -n study-mate --sort-by='.lastTimestamp'"
          echo "  helm status postgres -n study-mate"
          echo "  helm status weaviate -n study-mate" 