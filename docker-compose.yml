version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Dashboard port
    volumes:
      # Mount the static configuration files into the container
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/acme.json:/letsencrypt/acme.json"
      # Mount the Docker socket
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - proxy

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:80"  # Direct access for development
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`localhost`)"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.services.client.loadbalancer.server.port=80"

  # Auth Service
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"  # Direct access for development
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`localhost`) && PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.services.auth.loadbalancer.server.port=8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/studymate_auth
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-make-it-long-and-secure-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
    depends_on:
      - postgres

  # Document Service
  document-service:
    build:
      context: ./microservices/document-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8082"  # Direct access for development
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.documents.rule=Host(`localhost`) && PathPrefix(`/api/documents`)"
      - "traefik.http.routers.documents.entrypoints=web"
      - "traefik.http.services.documents.loadbalancer.server.port=8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/studymate_documents
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - AI_SERVICE_URL=http://ai-service:8083
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-make-it-long-and-secure-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
    depends_on:
      - postgres
      - ai-service

  # AI Service
  ai-service:
    build:
      context: ./microservices/ai-service
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8083:8083"  # Direct access for development
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai.rule=Host(`localhost`) && PathPrefix(`/api/ai`)"
      - "traefik.http.routers.ai.entrypoints=web"
      - "traefik.http.services.ai.loadbalancer.server.port=8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/studymate_ai
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - DOCUMENT_SERVICE_URL=http://document-service:8082
      - AI_OPENAI_API_KEY=${AI_OPENAI_API_KEY:-your-openai-api-key-here}
      - AI_OPENAI_MODEL=${AI_OPENAI_MODEL:-gpt-3.5-turbo}
      - AI_OPENAI_MAX_TOKENS=${AI_OPENAI_MAX_TOKENS:-2000}
      - AI_PROCESSING_BATCH_SIZE=${AI_PROCESSING_BATCH_SIZE:-5}
      - AI_PROCESSING_TIMEOUT=${AI_PROCESSING_TIMEOUT:-30000}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here-make-it-long-and-secure-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-604800000}
    depends_on:
      - postgres

  genai:
    build:
      context: ./genAi
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8084:8081"  # Changed port to avoid conflict
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.genai.rule=Host(`localhost`) && PathPrefix(`/genai`)"
      - "traefik.http.routers.genai.entrypoints=web"
      - "traefik.http.services.genai.loadbalancer.server.port=8081"
    environment:
      - WEAVIATE_HOST=weaviate
      - WEAVIATE_PORT=8083
    depends_on:
      - weaviate

  postgres:
    image: postgres:15
    ports: # TODO: remove?
      - "5432:5432"
    environment: # TODO: replace values with an env variables & secrets
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: studymate_auth
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database_setup.sql:/docker-entrypoint-initdb.d/01-setup-databases.sql
    networks:
      - proxy

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8083'
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.30.3
    ports: # TODO: remove?
      - 8085:8083  # Changed port to avoid conflict
      - 50051:50051
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - proxy
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_API_BASED_MODULES: 'true'
      CLUSTER_HOSTNAME: 'node1'

volumes:
  pgdata:
  weaviate_data:
  documentdb_data:

networks:
  proxy:
    name: proxy-net 